import { useState } from 'react';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import styles from './app.module.css';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import NxWelcome from './nx-welcome';

import { LockClosedIcon, LockOpenIcon, QuestionMarkCircleIcon } from '@heroicons/react/24/outline';

import {addStyles, EditableMathField, StaticMathField} from 'react-mathquill'
import Modal from '../common/modal';
import LoadingSpinner from '../common/spinner';
import OpenAI from 'openai';

addStyles(); // Adds global styles for math equations using react-mathquill.

// Frontmatter: Defining a set of notes for use by the student.
interface Note {
  question: string,
  noteText: string,
  aiAuthored?: boolean,
  teacherAuthored?: boolean,
  commentary?: string,
}

const notes: Note[] = [
  {
    question: "How do I get started?",
    noteText: "Add or Subtract the necessary term from each side of the equation to isolate the term with the variable while keeping the equation balanced.",
  },
  {
    question: "What should I be thinking about?",
    noteText: "I can solve for a variable in a two-step equation by doing inverse operations.",
  },
  {
    question: "Can you walk me through an example?",
    noteText: `example: 4x+8=16
    subtract the non-variable from both sides
    now it is 4x=8
    divide by the number before the variable on both sides
    now is it x=8
    ---------------------------------------------------------------------------------------------------------
    example: 4x+12=3
    subtract 12 from both sides
    now it is 4x=3
    divide by 4
    now it is x=3/4 (i think)`,
  },
  {
    question: "What strategy should I use?",
    noteText: "To solve, use the inverse operations to isolate the variable by itself.",
  },
  {
    question: "What's the main concept I should use?",
    aiAuthored: true,
    noteText: `When we're solving equations, it's really important to remember that both sides of the equation are equal - they balance each other out. So, if we change one side of the equation, we have to change the other side in the exact same way to keep it balanced. Think of it like a scale: if you add something to one side, you have to add the same thing to the other side to keep it level.`,
    commentary: "This note was pre-generated by an LLM based on the New Classrooms skill-primer document for solving 2-step equations. It is meant to build student 'conceptual understanding'."
  },
  {
    question: "How do I get the variable by itself in a 2-step equation?",
    aiAuthored: true,
    noteText: `First, we need to isolate the variable. This means we want to get the equation to look something like x = 10. To do this, we can perform what's called 'inverse operations' to both sides of the equation. This is just a fancy way of saying we do the opposite operation to get the variable by itself. We'll practice this together until you feel comfortable with it.`,
    commentary: "This note was pre-generated by an LLM based on the New Classrooms skill-primer document for solving 2-step equations. It is meant to build student 'strategic competence'."
  },
  {
    question: "What does it mean to perform 'inverse operations' in a 2-step equation?",
    aiAuthored: true,
    noteText: `Inverse operations are like doing the opposite to solve a puzzle. Imagine you have a box locked with two locks, and you need to open it. First, you undo the last lock you put on, and then the first one. In a 2-step equation, it's similar. You have a math problem with two steps, and to solve it, you do the opposite of those steps, but starting from the last one you did. For example, if you added 5 and then multiplied by 3, to solve it, you first divide by 3 (opposite of multiply) and then subtract 5 (opposite of add). This helps you find the number you started with!`,
    commentary: "This note was pre-generated by an LLM based on the New Classrooms skill-primer document for solving 2-step equations. It is meant to build student 'procedural fluency'."
  },
  {
    question: "How do I approach a hard math problem?",
    teacherAuthored: true,
    noteText: "Often, solving a math problem is a little bit like solving a maze. You have to figure out how to get from the starting point to the ending point, and you might make some wrong turns along the way. The important thing is that at each step, you try to figure out what else you might be able to figure out given what you already know. For example, can you guess an answer and then check if it's correct? Does that tell you anything about the problem?",
  },
  {
    question: "What might make this easier?",
    teacherAuthored: true,
    noteText: "Sometimes, it can be really helpful to draw a picture. Draw something (a box, bar, or shape) to represent each quantity. Try to capture the relationships between them (for example, do you know which one is bigger). What questions can you answer based on the picture you've drawn? What new questions have come up?",
  },
  {
    question: "Why am I so bad at this?",
    teacherAuthored: true,
    noteText: "Just like every professional basketball player had to first learn how to dribble, math is hard for everyone before it is easy. Just like athletes, mathematicians become great by putting in lots of practice and getting help from a coach. It took thousands of years for the smartest people in the world to figure out what you're learning today.",
  },
]

function dotProduct(a: number[], b: number[]): number {
  return a.reduce((sum, val, index) => sum + val * b[index], 0);
}

function magnitude(a: number[]): number {
  return Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));
}

function cosineSimilarity(a: number[], b: number[]): number {
  return dotProduct(a, b) / (magnitude(a) * magnitude(b));
}

export function App() {
  const [openAIKey, setOpenAIKey] = useState<string>("");
  const [usingKey, setUsingKey] = useState(false);
  const [keyChoiceEntered, setKeyChoiceEntered] = useState(false);

  const aboutIcon = <QuestionMarkCircleIcon className='h-5 w-5 inline'/>;

  const [alertOpen, setAlertOpen] = useState(false);
  const [alertContents, setAlertContents] = useState<React.ReactNode>(null);

  const alert = (alertContents: React.ReactNode)=>{
    setAlertContents(alertContents);
    setAlertOpen(true);
  }

  const coefficient = 3;
  const offset = -2;
  const rightHandSide = 10;

  const correctAnswer = (rightHandSide - offset)/coefficient;

  const equation: string = `${coefficient} x ${offset<0? '' : '+'} ${offset} = ${rightHandSide}`;

  const [mathInput, setMathInput] = useState('');
  const [rationaleInput, setRationaleInput] = useState('');
  const [showLengthHint, setShowLengthHint] = useState(false);

  const explanationParts = rationaleInput.trim().split(/\s+/).length;
  const minParts = 10;

  interface Submission {
    submittedAnswer: number,
    submittedRationale: string,
  }

  const [studentSubmissions, setStudentSubmissions] = useState<Submission[]>([]);
  const pastAnswers = new Set(studentSubmissions.map(submission => submission.submittedAnswer));

  const [hintsRevealed, setHintsRevealed] = useState(false);
  const [hintQuery, setHintQuery] = useState("");

  const [hintsEarned, setHintsEarned] = useState(0);

  const [noteRanking, setNodeRanking] = useState<number[]>([]);
  const [processingRanking, setProcessingRanking] = useState(false);

  const [unlockedNotes, setUnlockedNotes] = useState<number[]>([]);

  const processAnswer = ()=>{
    if (mathInput.trim().length <= 0) {
      alert(<p>It looks like you haven't given a <strong>guess answer</strong> yet. Remember to type it in the box after the "x=" above.</p>)
    } else if (explanationParts < minParts) {
      setShowLengthHint(true);
      alert(<p>Please give a longer <strong>explanation of your reasoning</strong> in the big textbox before continuing.</p>)
    } else if (pastAnswers.has(parseFloat(mathInput))) {
      alert(<p>It looks like you've tried that answer before. Please try a different value for x.</p>)
    } else {
      setShowLengthHint(false);

      const answer = parseFloat(mathInput);
      setStudentSubmissions([...studentSubmissions, {submittedAnswer: answer, submittedRationale: rationaleInput}]);
      setHintsEarned((prev)=>{return prev + 2});

      // Check Answer
      // TODO: Note that answer might be in LaTeX format
      if (answer === correctAnswer) {
        alert(<p title="Normally if the student has answered enough questions correctly, they would be asked to leave a note about something that helped them solve the problem, then they would be directed back to the on-platform skill assessment.">You gave the <span className=" text-teal-700 font-bold">correct</span> answer! This concludes the current demo. {aboutIcon}</p>);
      } else {
        setHintsRevealed(true);
      }
    }
  }

  const studentSeekingHint = ()=>{
    alert(<p title="AI can generate custom prompts that encourage 'productive dispositions' in mathematical reasoning.">Don't panic! It's normal to get stuck while practicing new skills. You'll have a chance to ask questions and see notes other students found helpful after you put in your first guess. If you're not sure what to guess to start, just try to put the right <em>kind</em> of answer down. For example, should it be a number? A big number or a small number? {aboutIcon}</p>)
  }

  const searchNotes = async () => {
    setProcessingRanking(true);
    const allIndices = Array.from({ length: notes.length }, (_, index) => index);
    const lockedIndices = allIndices.filter((index)=>{return !unlockedNotes.includes(index)});

    let errorEncountered = false;

    if(usingKey) {
      try {
        // Code that might throw an error
        const openai = new OpenAI({
          apiKey: openAIKey,
          dangerouslyAllowBrowser: true,
        });

        const queryEmbedding = (await openai.embeddings.create({
          model:"text-embedding-ada-002",
          input: hintQuery,
        })).data[0].embedding;

        const noteEmbeddings = (await openai.embeddings.create({
          model:"text-embedding-ada-002",
          input: notes.map((note)=>{return `${note.question}\n${note.noteText}`}),
        })).data.map((result)=>{return result.embedding});

        const similarities = noteEmbeddings.map((embedding)=>{
          return cosineSimilarity(queryEmbedding, embedding);
        });
  
        // Rank options (in decreasing order)
        allIndices.sort((index1, index2) => {return similarities[index2] - similarities[index1]})

        const maxIndex = Math.min(5, notes.length);
        const topResults = allIndices.slice(0, maxIndex);

        const unincludedUnlocked = unlockedNotes.filter((index)=>{return !topResults.includes(index)});

        setNodeRanking([...topResults, ...unincludedUnlocked]);
      } catch (error) {
        // Error handling
        alert(<p>An error occurred while using the OpenAI API: {(error as Error).message}</p>);
        errorEncountered = true;
      }
    }

    if (errorEncountered || !usingKey) {
      const aiOnlyIndices = lockedIndices.filter((index)=>{
        return notes[index].aiAuthored;
      })
      setNodeRanking([...aiOnlyIndices, ...unlockedNotes]);
    }

    setProcessingRanking(false);
  }

  const unlock = (noteIndex: number) => {
    if (unlockedNotes.length < hintsEarned) {
      setUnlockedNotes([...unlockedNotes, noteIndex]);
    } else {
      alert(<p>You've opened all the notes that you've earned; try a different answer to unlock more notes.</p>);
    }
  }

  return (<>
    <Modal open={alertOpen} setOpen={setAlertOpen}>
      {alertContents}
    </Modal>

    <div className={`container ${keyChoiceEntered? "" : " hidden"}`}>
      <h1>Practice: Solving 2-Step Equations</h1>

      {/* Problem Presentation + Details Buttons */}

      <p title="These prompts and problem generators are currently hand-made on a per-skill basis, but could potentially be drafted by AI using our existing 'Skill Primer' data.">Below is an example of an equation that requires two steps to solve (a "2-step equation"). What's your best guess for what value of x makes the equation true? <QuestionMarkCircleIcon className='h-5 w-5 inline'/></p>
      <StaticMathField>{equation}</StaticMathField>

      {/* Accepting Answers Here, alongside "I'm Stuck" button. */}
      <div>
        <StaticMathField>x = </StaticMathField>
        <EditableMathField
          latex={mathInput}
          onChange={(mathField) => setMathInput(mathField.latex())}
        />
      </div>

      <p title="We use student rationales to help predict which hints will be most helpful for them, and as a way of encouraging disciplined thinking.">What's your reasoning? {aboutIcon}</p>
      <textarea
        value={rationaleInput}
        onChange={(e) => setRationaleInput(e.target.value)}
        className="w-full p-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder="Enter your text here..."
      />
      {showLengthHint && <p className={explanationParts >= minParts ? "" : " text-red-700"}>Length: {explanationParts}/{minParts}</p>}

      <div className=' my-4'><button onClick={processAnswer}>Check Answer</button> <button className=' bg-cyan-600 mt-2' onClick={studentSeekingHint}>I'm stuck!</button></div>

      {/* Hints get revealed below */}
      {hintsRevealed && <>
        {hintsEarned > unlockedNotes.length && <>
          <p title="Student questions following incorrect answers help the system to find common sources of confusion and generate or re-rank appropriately tailored hints. This also helps students practice their 'adaptive reasoning'.">Great guess! But that's not quite correct. What are you wondering right now? Type a question below to see notes from other students. {aboutIcon}</p>
          <input
            type="text"
            value={hintQuery}
            onChange={(e) => setHintQuery(e.target.value)}
            className="w-full p-2 text-sm border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter your text here..."
          />
          <button className="my-4 bg-cyan-700" onClick={searchNotes}>Search Notes</button>
        </>}

        {/* List hints here as dropdowns that are unlockable. */}
        {processingRanking && <LoadingSpinner/>}
        {noteRanking.length > 0 && <>
          <p>You are able to view up to <strong>{hintsEarned} notes</strong>. Type a different question to see different options. Try a different answer to view more total notes.</p>
          {!usingKey && <p className='text-amber-700'>Because you haven't supplied an OpenAI API key for this demo (input available below), the notes available are not ordered in relation to your query or answers.</p>}
          {noteRanking.map((noteIndex)=>{
            const note = notes[noteIndex];
            const unlocked = unlockedNotes.includes(noteIndex);
            const title = note.commentary?
              <h3 title={note.commentary}>{note.question} {aboutIcon}</h3>
            : <h3>{note.question}</h3>;
            const authorLine = note.aiAuthored? "Generated by AI."
            : note.teacherAuthored? "General tips from a teacher."
            : "Contributed by a student like you."

            return <div className={` container ${hintsEarned <= unlockedNotes.length && !unlocked && "hidden"}`} key={noteIndex}>
              {title}
              <p className=" text-sm text-zinc-700">{authorLine}</p>
              {unlocked? <LockOpenIcon className="h-6 w-6 text-green-500" />: <button onClick={()=>{unlock(noteIndex)}}><LockClosedIcon className="h-6 w-6 text-white" /></button>}
              {unlocked && <p>{note.noteText}</p>}
            </div>
          })}
        </>}

      </>}

      {/* Closing matter: Post-script */}

      <p className=' mt-12 text-sm text-fuchsia-700' title="As a demo, there are many production-level details that remain to be implemented, like screen-reader accessibility, translation, and platform data-integration. This page is a demo by New Classrooms of an AI-powered student-support interaction modality. We hope to scale it from this single skill to the over 300 in our library.">Mouse over (hover over) parts of this page with the {aboutIcon} to see additional info about this <em>DEMO</em>. (Long-press on mobile.)</p>
    </div>

    <div className={`container`}>
      <h2 className=' indent-0 m-0 p-0' title="Although many responses are pre-computed, the live re-ranking of possible hints is partially facilitated by LLM's.">This demo uses the OpenAI API. {aboutIcon}</h2>
      {keyChoiceEntered? (usingKey? <p>Update the key below if needed.</p> : <p>Add an API key at any time to see full functionality.</p>) : <p>Please enter an API key to proceed, or view the demo with restricted functionality.</p>}
      <input
        type="password"
        value={openAIKey}
        onChange={(e) => setOpenAIKey(e.target.value)}
        className="w-full p-2 text-sm border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder="Enter a valid OpenAI API Key here..."
      />
      <div className=' my-4'>
        <button onClick={()=>{
          setUsingKey(true);
          setKeyChoiceEntered(true);
        }}>{usingKey? "Update API Key" : "Submit API Key"}</button>
        {(usingKey || !keyChoiceEntered) && <>
          <p>OR</p>
          <button className=' bg-cyan-600 mt-2' onClick={()=>{
            setUsingKey(false);
            setKeyChoiceEntered(true);
          }}>Proceed with Limited Functionality</button>
        </>}
      </div>
    </div>
  </>);
}

export default App;
